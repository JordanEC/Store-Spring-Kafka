version: '3.5'
services:
  mysql:
    image: mysql
    container_name: mysql
    environment:
      - MYSQL_USER=store
      - MYSQL_PASSWORD=store
      - MYSQL_ROOT_PASSWORD=54321
    ports:
      - 12345:3306
    entrypoint:
      sh -c "
      echo 'CREATE DATABASE IF NOT EXISTS store_producer; CREATE DATABASE IF NOT EXISTS store_consumer;' > /docker-entrypoint-initdb.d/init.sql;
      /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      "
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
  kafka-service:
#    build: .
    image: wurstmeister/kafka
    container_name: kafka-service
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka-service
      KAFKA_CREATE_TOPICS: "test:1:1,order-events:3:1"
#      KAFKA_CREATE_TOPICS: "test:1:1,order-events:3:3" -> ERROR org.apache.kafka.common.errors.InvalidReplicationFactorException: Replication factor: 3 larger than available brokers: 1.
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  store-producer:
    image: jordanec/store-producer:latest
    build:
      context: ./
      dockerfile: producer/Dockerfile
    ports:
      - 8080:8080
    container_name: store-producer
    environment:
      SPRING_PROFILES_ACTIVE: docker
      WAIT_BEFORE_HOSTS: 5
      WAIT_HOSTS: mysql:3306
#    volumes:
#      - /data/spring-boot-app
  store-consumer:
    image: jordanec/store-consumer:latest
    build:
      context: ./
      dockerfile: consumer/Dockerfile
    ports:
      - 8081:8081
    container_name: store-consumer
    environment:
      SPRING_PROFILES_ACTIVE: docker
      WAIT_BEFORE_HOSTS: 10
      WAIT_HOSTS: store-producer:8080
#  store-app:
#    stdin_open: true
#    image: jordanec/store-app:latest
#    build:
#      context: ./
#      dockerfile: store-app/Dockerfile.dev
#    ports:
#      - 4200:4200
#    container_name: store-app
#    volumes:
#      - './store-app/:/app'
#      - '/app/node_modules'
#    environment:
#      - CHOKIDAR_USEPOLLING=true
  store-app-prod:
    stdin_open: true
    image: jordanec/store-app-prod:latest
    build:
      context: ./
      dockerfile: store-app/Dockerfile
    ports:
      - 80:80
    container_name: store-app-prod